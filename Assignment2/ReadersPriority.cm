//
monitor ReadersWriters {
	int readercount;
	int busy;
	condition OKtoRead, OKtoWrite;

void StartRead() {
	if (busy || !empty(OKtoWrite))
		waitc(OKtoRead);
	readercount = readercount + 1;
	cout << "Reader count is " << readercount << '\n';
	signalc(OKtoRead);
}

void EndRead() {
	readercount = readercount - 1;
	if (readercount == 0) 
		signalc(OKtoWrite);
}

void StartWrite() {
	if (busy || (readercount != 0))
		waitc(OKtoWrite);
	busy = 1;
}

void EndWrite() {
	busy = 0;
	if (empty(OKtoRead))
		signalc(OKtoWrite);
	else
		signalc(OKtoRead);
}

init {
	readercount = 0; busy = 0;
}
}

void Reader(int N) {
	int I,i;
	for (I = 1; I < 7; I++) {
		StartRead();
		cout <<"Reader "<< N << " enters the critical section" << '\n';
		cout <<"Reader "<< N << " leaves the critical section" << '\n';			
		EndRead();
	}
}

void Writer(int N) {
	int I,i;
	for (I = 1; I < 7; I++) {
		i=100;
		while(i>0)
		{
			i--;
		}
		StartWrite();
		cout <<"Writer "<< N << " enters the critical section" << '\n';
		cout <<"Writer "<< N << " leaves the critical section" << '\n';			
		EndWrite();
	}
}

void main() {
	cobegin {
		Reader(1); Reader(2); Reader(3);Reader(4); Reader(5); Reader(6);
		Writer(1); Writer(2);Writer(3);Writer(4);
	}
}

